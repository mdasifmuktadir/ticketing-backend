// <auto-generated />
using System;
using Eapproval.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eapproval.Migrations
{
    [DbContext(typeof(TicketContext))]
    partial class TicketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eapproval.Models.ActionObject", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "additionalInfo");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "comments");

                    b.Property<int?>("ForwardedToId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "forwardedToId");

                    b.Property<int?>("RaisedById")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "raisedById");

                    b.Property<int?>("Serial")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "serial");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "time");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("ForwardedToId");

                    b.HasIndex("RaisedById");

                    b.HasIndex("TicketId");

                    b.ToTable("ActionObject");

                    b.HasAnnotation("Relational:JsonPropertyName", "actionsReceived");
                });

            modelBuilder.Entity("Eapproval.Models.Blogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "authorId");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "headline");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blogs");

                    b.HasAnnotation("Relational:JsonPropertyName", "authored");
                });

            modelBuilder.Entity("Eapproval.Models.Chat", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Chats");

                    b.HasAnnotation("Relational:JsonPropertyName", "chats");
                });

            modelBuilder.Entity("Eapproval.Models.ConnectionHolderClass", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chatId");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "_connectionId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ConnectionHolderClass");

                    b.HasAnnotation("Relational:JsonPropertyName", "connectionHoler");
                });

            modelBuilder.Entity("Eapproval.Models.ConversationClass", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chatId");

                    b.Property<int?>("FromId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "fromId");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "time");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("FromId");

                    b.ToTable("ConversationClass");

                    b.HasAnnotation("Relational:JsonPropertyName", "conversation");
                });

            modelBuilder.Entity("Eapproval.Models.DetailsClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Input")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "input");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "label");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "teamId");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TicketId");

                    b.ToTable("DetailsClass");

                    b.HasAnnotation("Relational:JsonPropertyName", "details");
                });

            modelBuilder.Entity("Eapproval.Models.File2", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "actionId");

                    b.Property<int?>("ConversationId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "conversationId");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fileName");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "noteId");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "originalName");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ConversationId");

                    b.HasIndex("NoteId");

                    b.HasIndex("TicketId");

                    b.ToTable("File2");

                    b.HasAnnotation("Relational:JsonPropertyName", "files");
                });

            modelBuilder.Entity("Eapproval.Models.Location", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Eapproval.Models.Mentions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "notesId");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "notificationId");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Mentions");
                });

            modelBuilder.Entity("Eapproval.Models.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "caption");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "data");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Mentions")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mentions");

                    b.Property<string>("TakenBy")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "takenBy");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");

                    b.HasAnnotation("Relational:JsonPropertyName", "notes");
                });

            modelBuilder.Entity("Eapproval.Models.Notification", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("FromId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "fromId");

                    b.Property<string>("Mentions")
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mentions");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketId");

                    b.Property<int?>("TicketsId")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "time");

                    b.Property<int?>("ToId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "toId");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("TicketsId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasAnnotation("Relational:JsonPropertyName", "notificationTos");
                });

            modelBuilder.Entity("Eapproval.Models.ProblemTypesClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Subs")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "subs");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "teamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("ProblemTypesClass");

                    b.HasAnnotation("Relational:JsonPropertyName", "problemTypes");
                });

            modelBuilder.Entity("Eapproval.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("HasServices")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hasServices");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "headId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.ToTable("Teams");

                    b.HasAnnotation("Relational:JsonPropertyName", "TeamsHeaded");
                });

            modelBuilder.Entity("Eapproval.Models.Tickets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "accepted");

                    b.Property<bool?>("ApprovalRequired")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "approvalRequired");

                    b.Property<bool?>("Ask")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "ask");

                    b.Property<bool?>("Assigned")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "assigned");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "assignedToId");

                    b.Property<bool?>("BeenRejected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "beenRejected");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "category");

                    b.Property<bool?>("CloseRequested")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "closeRequested");

                    b.Property<int?>("CurrentHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentHandlerId");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "department");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<bool>("Genesis")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "genesis");

                    b.Property<int?>("GenesisId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "genesisId");

                    b.Property<bool?>("HasService")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hasService");

                    b.Property<string>("Infos")
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "infos");

                    b.Property<string>("InitialLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "initialLocation");

                    b.Property<string>("InitialPriority")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "initialPriority");

                    b.Property<int?>("InitialPriorityId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "initialPriortiyId");

                    b.Property<string>("InitialType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "initialType");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<bool?>("MadeCloseRequest")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "madeCloseRequest");

                    b.Property<string>("Mentions")
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mentions");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "number");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<int?>("PrevHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "prevHandlerId");

                    b.Property<string>("PrevStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prevStatus");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "priority");

                    b.Property<string>("ProblemDetails")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "problemDetails");

                    b.Property<int?>("RaisedById")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "raisedById");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "remarks");

                    b.Property<string>("RequestDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "requestDate");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "serviceType");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketType");

                    b.Property<int?>("TicketingHeadId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketingHeadId");

                    b.Property<int>("TimesRaised")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "timesRaised");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Users")
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "users");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CurrentHandlerId");

                    b.HasIndex("PrevHandlerId");

                    b.HasIndex("RaisedById");

                    b.HasIndex("TicketingHeadId");

                    b.ToTable("Tickets");

                    b.HasAnnotation("Relational:JsonPropertyName", "TicketsHeaded");
                });

            modelBuilder.Entity("Eapproval.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Available")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "available");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "department");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "designation");

                    b.Property<string>("EmpCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "empCode");

                    b.Property<string>("EmpName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "empName");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<string>("Groups")
                        .HasColumnType("varchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "groups");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mailAddress");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mobileNo");

                    b.Property<int>("Numbers")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "numbers");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "rank");

                    b.Property<int?>("Raters")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "raters");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "section");

                    b.Property<string>("Team")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "team");

                    b.Property<string>("TeamType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "TeamType");

                    b.Property<string>("TravelUserType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "travelUserType");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "unit");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userType");

                    b.Property<string>("Wing")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "wing");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasAnnotation("Relational:JsonPropertyName", "head");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.Property<int>("LeadersId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsLeadedId")
                        .HasColumnType("int");

                    b.HasKey("LeadersId", "TeamsLeadedId");

                    b.HasIndex("TeamsLeadedId");

                    b.ToTable("TeamLeaders", (string)null);
                });

            modelBuilder.Entity("TeamUser1", b =>
                {
                    b.Property<int>("MonitorsId")
                        .HasColumnType("int");

                    b.Property<int>("TeamsMonitoredId")
                        .HasColumnType("int");

                    b.HasKey("MonitorsId", "TeamsMonitoredId");

                    b.HasIndex("TeamsMonitoredId");

                    b.ToTable("TeamMonitors", (string)null);
                });

            modelBuilder.Entity("TeamUser2", b =>
                {
                    b.Property<int>("SubordinatesId")
                        .HasColumnType("int");

                    b.Property<int>("TeamMembersId")
                        .HasColumnType("int");

                    b.HasKey("SubordinatesId", "TeamMembersId");

                    b.HasIndex("TeamMembersId");

                    b.ToTable("TeamSuboridinates", (string)null);
                });

            modelBuilder.Entity("Eapproval.Models.ActionObject", b =>
                {
                    b.HasOne("Eapproval.Models.User", "ForwardedTo")
                        .WithMany("ActionsReceived")
                        .HasForeignKey("ForwardedToId");

                    b.HasOne("Eapproval.Models.User", "RaisedBy")
                        .WithMany("ActionsRaised")
                        .HasForeignKey("RaisedById");

                    b.HasOne("Eapproval.Models.Tickets", "Ticket")
                        .WithMany("Actions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ForwardedTo");

                    b.Navigation("RaisedBy");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Eapproval.Models.Blogs", b =>
                {
                    b.HasOne("Eapproval.Models.User", "Author")
                        .WithMany("Authored")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Eapproval.Models.Chat", b =>
                {
                    b.HasOne("Eapproval.Models.Tickets", "Ticket")
                        .WithMany("Chats")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Eapproval.Models.ConnectionHolderClass", b =>
                {
                    b.HasOne("Eapproval.Models.Chat", "Chat")
                        .WithMany("ConnectionHolders")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Eapproval.Models.ConversationClass", b =>
                {
                    b.HasOne("Eapproval.Models.Chat", "Chat")
                        .WithMany("Conversation")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eapproval.Models.User", "From")
                        .WithMany("Conversations")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chat");

                    b.Navigation("From");
                });

            modelBuilder.Entity("Eapproval.Models.DetailsClass", b =>
                {
                    b.HasOne("Eapproval.Models.Team", "Team")
                        .WithMany("Details")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eapproval.Models.Tickets", "Ticket")
                        .WithMany("Details")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Team");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Eapproval.Models.File2", b =>
                {
                    b.HasOne("Eapproval.Models.ActionObject", "Action")
                        .WithMany("Files")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.ConversationClass", "Conversation")
                        .WithMany("Files")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eapproval.Models.Notes", "Note")
                        .WithMany("Files")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.Tickets", "Ticket")
                        .WithMany("Files")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Action");

                    b.Navigation("Conversation");

                    b.Navigation("Note");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Eapproval.Models.Mentions", b =>
                {
                    b.HasOne("Eapproval.Models.Notes", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.HasOne("Eapproval.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId");

                    b.Navigation("Note");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("Eapproval.Models.Notes", b =>
                {
                    b.HasOne("Eapproval.Models.Tickets", "Ticket")
                        .WithMany("Notes")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Eapproval.Models.User", null)
                        .WithMany("Notes")
                        .HasForeignKey("UserId");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Eapproval.Models.Notification", b =>
                {
                    b.HasOne("Eapproval.Models.User", "From")
                        .WithMany("NotificationFroms")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.Tickets", null)
                        .WithMany("Notifications")
                        .HasForeignKey("TicketsId");

                    b.HasOne("Eapproval.Models.User", null)
                        .WithMany("NotificationTos")
                        .HasForeignKey("UserId");

                    b.Navigation("From");
                });

            modelBuilder.Entity("Eapproval.Models.ProblemTypesClass", b =>
                {
                    b.HasOne("Eapproval.Models.Team", "Team")
                        .WithMany("ProblemTypes")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Eapproval.Models.Team", b =>
                {
                    b.HasOne("Eapproval.Models.User", "Head")
                        .WithMany("TeamsHeaded")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Head");
                });

            modelBuilder.Entity("Eapproval.Models.Tickets", b =>
                {
                    b.HasOne("Eapproval.Models.User", "AssignedTo")
                        .WithMany("TicketsAssigned")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.User", "CurrentHandler")
                        .WithMany("TicketsCurrentlyHandled")
                        .HasForeignKey("CurrentHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.User", "PrevHandler")
                        .WithMany("TicketsPreviouslyHandled")
                        .HasForeignKey("PrevHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.User", "RaisedBy")
                        .WithMany("TicketsRaised")
                        .HasForeignKey("RaisedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Eapproval.Models.User", "TicketingHead")
                        .WithMany("TicketsHeaded")
                        .HasForeignKey("TicketingHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssignedTo");

                    b.Navigation("CurrentHandler");

                    b.Navigation("PrevHandler");

                    b.Navigation("RaisedBy");

                    b.Navigation("TicketingHead");
                });

            modelBuilder.Entity("TeamUser", b =>
                {
                    b.HasOne("Eapproval.Models.User", null)
                        .WithMany()
                        .HasForeignKey("LeadersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eapproval.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsLeadedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser1", b =>
                {
                    b.HasOne("Eapproval.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MonitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eapproval.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsMonitoredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamUser2", b =>
                {
                    b.HasOne("Eapproval.Models.User", null)
                        .WithMany()
                        .HasForeignKey("SubordinatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eapproval.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eapproval.Models.ActionObject", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Eapproval.Models.Chat", b =>
                {
                    b.Navigation("ConnectionHolders");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Eapproval.Models.ConversationClass", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Eapproval.Models.Notes", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Eapproval.Models.Team", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("ProblemTypes");
                });

            modelBuilder.Entity("Eapproval.Models.Tickets", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Chats");

                    b.Navigation("Details");

                    b.Navigation("Files");

                    b.Navigation("Notes");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Eapproval.Models.User", b =>
                {
                    b.Navigation("ActionsRaised");

                    b.Navigation("ActionsReceived");

                    b.Navigation("Authored");

                    b.Navigation("Conversations");

                    b.Navigation("Notes");

                    b.Navigation("NotificationFroms");

                    b.Navigation("NotificationTos");

                    b.Navigation("TeamsHeaded");

                    b.Navigation("TicketsAssigned");

                    b.Navigation("TicketsCurrentlyHandled");

                    b.Navigation("TicketsHeaded");

                    b.Navigation("TicketsPreviouslyHandled");

                    b.Navigation("TicketsRaised");
                });
#pragma warning restore 612, 618
        }
    }
}
